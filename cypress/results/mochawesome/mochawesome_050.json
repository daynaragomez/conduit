{
  "stats": {
    "suites": 1,
    "tests": 4,
    "passes": 4,
    "pending": 1,
    "failures": -1,
    "start": "2022-03-31T19:33:35.721Z",
    "end": "2022-03-31T19:33:50.632Z",
    "duration": 14911,
    "testsRegistered": 5,
    "passPercent": 100,
    "pendingPercent": 20,
    "other": 1,
    "hasOther": true,
    "skipped": 1,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "0677495a-b350-4043-9eaf-48a29cc59809",
      "title": "",
      "fullFile": "cypress/integration/testingD/refactorServerRoute.spec.js",
      "file": "cypress/integration/testingD/refactorServerRoute.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ff4cf9ef-307b-4776-9f1d-eb7b895610e7",
          "title": "Test with backend / refactoring use intercept",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "verify correct request and response",
              "fullTitle": "Test with backend / refactoring use intercept verify correct request and response",
              "timedOut": null,
              "duration": 5541,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//cy.server() //crear el servidorde cypress\ncy.intercept('POST', '**/api.realworld.io/api/articles').as('postArticles');\ncy.contains('New Article').click();\ncy.get('[formcontrolname=\"title\"]').type('GitHub ');\ncy.get('[formcontrolname=\"description\"]').type('code hosting platform');\ncy.get('[formcontrolname=\"body\"]').type('version control and collaboration, lets you and others work together on projects from anywhere.');\ncy.contains('Publish Article').click();\ncy.wait('@postArticles');\ncy.get('@postArticles').then(xhr => {\n  console.log(xhr);\n  expect(xhr.response.statusCode).to.equal(200);\n  expect(xhr.request.body.article.body).to.equal('version control and collaboration, lets you and others work together on projects from anywhere.');\n  expect(xhr.response.body.article.description).to.equal('code hosting platform');\n});",
              "err": {},
              "uuid": "909a2e87-67d0-45ca-a334-41c4254ba84b",
              "parentUUID": "ff4cf9ef-307b-4776-9f1d-eb7b895610e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Intercepting and modifying the request and response",
              "fullTitle": "Test with backend / refactoring use intercept Intercepting and modifying the request and response",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "b492a50b-ac00-4b77-a982-a9af5a83087a",
              "parentUUID": "ff4cf9ef-307b-4776-9f1d-eb7b895610e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should gave tags with routing object ",
              "fullTitle": "Test with backend / refactoring use intercept should gave tags with routing object ",
              "timedOut": null,
              "duration": 1180,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//looking in json file mocked the co\n//cy.wait(20000)\ncy.get('div .tag-list').should('contain', 'cypress').should('contain', 'automation').should('contain', 'testing');",
              "err": {},
              "uuid": "d1400dbc-d3c2-44cf-8388-fbc835904d53",
              "parentUUID": "ff4cf9ef-307b-4776-9f1d-eb7b895610e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify the local feed likes count",
              "fullTitle": "Test with backend / refactoring use intercept Verify the local feed likes count",
              "timedOut": null,
              "duration": 1477,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.intercept('GET', '**/articles/feed*', {\n  \"articles\": [],\n  \"articlesCount\": 0\n});\ncy.intercept('GET', '**/articles*', {\n  fixture: 'articles.json'\n});\ncy.contains('Global Feed').click();\ncy.get('app-article-list button').then(listOfButton => {\n  expect(listOfButton).to.contain('2');\n  expect(listOfButton[1]).to.contain('5');\n}); //create the route by call a fixture methode and read the fisture file articles.json\ncy.fixture('articles').then(file => {\n  const articlelink = file.articles[1].slug;\n  cy.intercept('POST', '**/articles/' + articlelink + '/favorite', file); //file is the respond of the link that we created\n}); //assertion \ncy.get('app-article-list button').eq(1).click().should('contain', '6'); //because is mocked test, we do not depend on the backend server",
              "err": {},
              "uuid": "f2b5397a-7dfe-4011-b726-568d8cf4e309",
              "parentUUID": "ff4cf9ef-307b-4776-9f1d-eb7b895610e7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete new article  in global feed",
              "fullTitle": "Test with backend / refactoring use intercept Delete new article  in global feed",
              "timedOut": null,
              "duration": 3312,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//create a const for login and relocated at commands.js loginApplication()\n// const userCredentials =  { \"user\": {\n//   \"email\": \"cytest@test.com\",\n//   \"password\": \"Welcome123\"\n//  }\n// }\nconst bodyRequest = {\n  \"article\": {\n    \"tagList\": [],\n    \"title\": \"Request from API (Postman)\",\n    \"description\": \"Api testing is easy\",\n    \"body\": \"angular is cool\"\n  }\n}; //this are in comments because we relocated at command.js or loginApplication() so \n//we use instaed cy.get\n// cy.request('POST', 'https://api.realworld.io/api/users/login', userCredentials)\n// .its('body').then( body => {\ncy.get('@token').then(token => {\n  //2. second request from articles\n  cy.request({\n    url: 'https://api.realworld.io/api/articles',\n    headers: {\n      'Authorization': 'Token ' + token\n    },\n    //la variable guardada como se muestra en postman\n    method: 'POST',\n    body: bodyRequest //const created to save the body request\n  }).then(response => {\n    expect(response.status).to.equal(200);\n  }); //we need go into global feed\n  cy.contains('Global Feed').click();\n  cy.get('.article-preview').first().click();\n  cy.get('.article-actions').contains('Delete Article').click(); //need request our article is successfully deleted.request the list by using API\n  //verifying the first artile of the list DO NOT have text \"Request from API (Postman)\" como arriba que creamos nosotros\n  cy.request({\n    url: 'https://api.realworld.io/api/articles?limit=10&offset=0',\n    headers: {\n      'Authorization': 'Token ' + token\n    },\n    //la variable guardada como se muestra en postman\n    method: 'GET'\n  }).its('body').then(body => {\n    //console.log(body) //aqui probammos que en consola se imprima la lista articulos\n    expect(body.articles[0].title).not.equal('Request from API (Postman)');\n  });\n});",
              "err": {},
              "uuid": "125a3a8f-b2c5-4138-8c8e-9e0cdf867030",
              "parentUUID": "ff4cf9ef-307b-4776-9f1d-eb7b895610e7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "909a2e87-67d0-45ca-a334-41c4254ba84b",
            "d1400dbc-d3c2-44cf-8388-fbc835904d53",
            "f2b5397a-7dfe-4011-b726-568d8cf4e309",
            "125a3a8f-b2c5-4138-8c8e-9e0cdf867030"
          ],
          "failures": [],
          "pending": [
            "b492a50b-ac00-4b77-a982-a9af5a83087a"
          ],
          "skipped": [],
          "duration": 11510,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false
      },
      "version": "4.1.0"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/results/mochawesome",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "4.1.0"
    }
  }
}